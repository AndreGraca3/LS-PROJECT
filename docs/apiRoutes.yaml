swagger: '2.0'
info:
  version: 1.0.0
  title: Our Trello API
  description: This is a simple Tasks API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

paths:
  /user:
    post:
      summary: user account creation.
      operationId: createUser
      description:
        creates a user and returns a user's identifier and a token.
      tags:
        - User
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: name, email, password and avatar.
          description: user's name, email, password and avatar.
          required: true
          schema:
            $ref: '#/definitions/createUser'
      responses:
        201:
          description: user created successfully.
          schema:
            $ref: '#/definitions/userReturn'
        400:
          description: invalid email or missing parameters in body.
        409:
          description: user already exists (e.g emails has been taken).
        500:
          description: internal server error.

    get:
      summary: get details of a user.
      operationId: getUser
      description:
        gets the details of a given user.
      tags:
        - User
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
      responses:
        200:
          description: search results matching criteria.
          schema:
            $ref: '#/definitions/newUser'
        401:
          description: invalid token.
        500:
          description: internal server error.

    put:
      summary: change avatar of a user.
      operationId: changeAvatar
      description:
        changes a user's avatar.
      tags:
        - User
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: body
          name: new avatar
          description: new image for a avatar.
          required: true
          schema:
            $ref: '#/definitions/changeAvatar'
      responses:
        200:
          description: changed the avatar successfully.
        400:
          description: missing avatar in body.
        401:
          description: invalid token.
        500:
          description: internal server error.

  /user/login:
    post:
      summary: user login.
      operationId: login
      description:
        given a user email and password logs a user in our app.
      tags:
        - User
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: email and password
          description: user's email and password.
          required: true
          schema:
            $ref: '#/definitions/login'
      responses:
        200:
          description: logged successfully.
          schema:
            $ref: '#/definitions/loginSuccess'
        400:
          description: missing email or password in body.
        401:
          description: invalid token.
        500:
          description: internal server error.

  /board:
    post:
      summary: board creation.
      operationId: createBoard
      description:
        creates a new board and returns a identifier for that board.
      tags:
        - Board
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: body
          name: name and description
          description: board's name and description.
          required: true
          schema:
            $ref: '#/definitions/newBoard'
      responses:
        201:
          description: board created successfully.
          schema:
            $ref: '#/definitions/boardReturn'
        400:
          description: missing name or description.
        401:
          description: invalid token.
        409:
          description: board with given name already exists.
        500:
          description: internal server error.

    get:
      summary: get all boards from a user.
      operationId: getBoardsFromUser
      description:
        Get the list with all user available boards.
      tags:
        - Board
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: query
          name: limit
          type: integer
          description: number of boards returned.
          required: false
        - in: query
          name: skip
          type: integer
          description: number of boards to jump.
          required: false
      responses:
        200:
          description: search results matching criteria.
          schema:
            $ref: '#/definitions/AllBoards'
        401:
          description: invalid token.
        500:
          description: internal server error.


  /board/{idBoard}:
    put:
      summary: add a user to a board.
      operationId: AddUserToBoard
      description:
        add a user to an existing board.
      tags:
        - Board
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
        - in: body
          name: idUser
          required: true
          schema:
            $ref: '#/definitions/idUser'
      responses:
        200:
          description: user added successfully.
        400:
          description: missing user or board identifier.
        401:
          description: invalid token.
        404:
          description: board or user not found.
        500:
          description: internal server error.

    get:
      summary: get details from a board.
      operationId: getBoard
      description:
        Get the detailed information of a board.
      tags:
        - Board
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
      responses:
        200:
          description: search results matching criteria.
          schema:
            $ref: '#/definitions/newBoard'
        400:
          description: missing board identifier.
        401:
          description: invalid token.
        404:
          description: board not found.
        500:
          description: internal server error.

  /board/{idBoard}/allUsers:
    get:
      summary: get all users from a board.
      operationId: getUsersFromBoard
      description:
        get all users from a board by the board identifier.
      tags:
        - Board
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
      responses:
        200:
          description: search result matching criteria.
          schema:
            $ref: '#/definitions/listUser'
        400:
          description: missing board identifier.
        401:
          description: invalid token.
        404:
          description: board not found.
        500:
          description: internal server error.

  /board/{idBoard}/list:
    post:
      summary: create a list in a board.
      operationId: createList
      description:
        Creates a new list on an existing board.
      tags:
        - List
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: body
          name: name
          required: true
          schema:
            $ref : '#/definitions/list'
        - in: path
          name: idBoard
          type: integer
          required: true
      responses:
        201:
          description: list created successfully.
          schema:
            $ref: '#/definitions/listReturn'
        400:
          description: missing board or list identifier or name.
        401:
          description: invalid token.
        404:
          description: board not found.
        500:
          description: internal server error.

    get:
      summary: gets all list of a board.
      operationId: getListsFromBoard
      description:
        Get the lists of a board.
      tags:
        - List
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
      responses:
        200:
          description: lists of a board.
          schema:
            $ref: '#/definitions/lists'
        400:
          description: missing board identifier.
        401:
          description: invalid token.
        404:
          description: board not found.
        500:
          description: internal server error.


  /board/{idBoard}/list/{idList}:
    get:
      summary: get details of a list.
      operationId: getList
      description:
        Get detailed information of a list.
      tags:
        - List
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
        - in: path
          name: idList
          type: integer
          required: true
      responses:
        200:
          description: search results matching criteria.
          schema:
            $ref: '#/definitions/list'
        400:
          description: missing board or list identifier.
        401:
          description: invalid token.
        404:
          description: list not found or board not found.
        500:
          description: internal server error.

    delete:
      summary: deletes a list.
      operationId: deleteList
      description:
        deletes a list by its id.
      tags:
        - List
      parameters:
        - in: query
          name: action
          type: string
          description: action applied to cards of this list.
          required: false
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
        - in: path
          name: idList
          type: integer
          required: true
      responses:
        200:
          description: list deleted successfully.
        204:
          description: list doesn't exist.
        400:
          description: missing board or list identifier.
        401:
          description: invalid token.
        404:
          description: board not found.
        500:
          description: internal server error.

  /board/{idBoard}/list/{idList}/cards:
    get:
      summary: get all cards in a list.
      operationId: getCardsFromList
      description:
        Get the set of cards in a list.
      tags:
        - List
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: path
          name: idList
          type: integer
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
      responses:
        200:
          description: search results matching criteria.
          schema:
            $ref: '#/definitions/cards'
        400:
          description: missing list or board identifier.
        401:
          description: invalid token.
        404:
          description: board or list not found.
        500:
          description: internal server error.

  /board/{idBoard}/card:
    post:
      summary: create a card in a list.
      operationId: createCard
      description:
        Creates a new card in a list.
      tags:
        - Card
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
        - in: body
          name: card
          required: true
          schema:
            $ref: '#/definitions/card'
      responses:
        201:
          description: card created successfully.
          schema:
            $ref: '#/definitions/cardReturn'
        400:
          description: missing name, description, list identifier or end date.
        401:
          description: invalid token.
        404:
          description: list or board not found.
        500:
          description: internal server error.

  /board/{idBoard}/card/{idCard}:
    get:
      summary: get a card.
      operationId: getCard
      description:
        Get the detailed information of a card.
      tags:
        - Card
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user.
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
        - in: path
          name: idCard
          type: integer
          required: true
      responses:
        200:
          description: search results matching criteria.
          schema:
            $ref: '#/definitions/getCard'
        400:
          description: missing board or card identifier.
        401:
          description: invalid token.
        404:
          description: board or card not found.
        500:
          description: internal server error.

    put:
      summary: move a card.
      operationId: moveCard
      description:
        Moves a card from a list to another list.
      tags:
        - Card
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
        - in: body
          name: lid
          required: true
          schema:
            $ref: '#/definitions/moveCard'
        - in: path
          name: idCard
          type: integer
          required: true
      responses:
        200:
          description: move successfully.
        400:
          description: missing source, destination list identifier or index.
        401:
          description: invalid token.
        404:
          description: board, list or card not found.
        500:
          description: internal server error.

    delete:
      summary: delete a card.
      operationId: deleteCard
      description:
        deletes a card.
      tags:
        - Card
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
        - in: path
          name: idCard
          type: integer
          required: true
      responses:
        200:
          description: card deleted successfully.
        204:
          description: card doesn't exist.
        400:
          description: missing board or card identifier.
        401:
          description: invalid token.
        404:
          description: board not found.
        500:
          description: internal server error.

  /board/{idBoard}/card/{idCard}/update:
    put:
      summary: update a card.
      operationId: updateCard
      description:
        updates description and/or end date of a card.
      tags:
        - Card
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: token
          type: string
          description: token of the corresponding user
          required: true
        - in: path
          name: idBoard
          type: integer
          required: true
        - in: body
          name: updateCard
          required: true
          schema:
            $ref: '#/definitions/updateCard'
        - in: path
          name: idCard
          type: integer
          required: true
      responses:
        200:
          description: updated successfully.
        400:
          description: missing body parameters, board or card identifier.
        401:
          description: invalid token.
        404:
          description: board, list or card not found.
        500:
          description: internal server error.

definitions:
  newUser:
    type: object
    required:
      - idUser
      - email
      - name
      - token
      - hashedPassword
      - avatar
    properties:
      idUser:
        type: integer
        example: 1
      email:
        type: string
        example : "Diogo@email.com"
      name:
        type: string
        example: "Diogo"
      token:
        type: string
        example: "36b8f84d-df4e-4d49-b662-bcde71a8764f"
      hashedPassword:
        type: string
        example: "5e884898da28047151d0e56f8dc6292773603d0d6"
      avatar:
        type: string
        example: "profilePic.jpg"

  userReturn:
    type: object
    required:
      - identifier
      - token
    properties:
      identifier:
        type: integer
        example: 1
      token:
        type: string
        example: "36b8f84d-df4e-4d49-b662-bcde71a8764f"

  newBoard:
    type: object
    required:
      - idBoard
      - name
      - description
      - primaryColor
      - secondaryColor
      - lists
      - archivedCards
    properties:
      idBoard:
        type: integer
        example: 1
      name:
        type: string
        example: "Project Name"
      description:
        type: string
        example: "This project consists of doing..."
      primaryColor:
        type: string
        example: "GRAY"
      secondaryColor:
        type: string
        example: "NAVY"
      lists:
        type: array
        items:
          type: object
          example: [{
            "idList": 24,
            "idBoard": 1,
            "name": "List1",
            "cards": [
              {
                "idCard": 41,
                "idList": 24,
                "idBoard": 1,
                "name": "Card8",
                "description": "Isto é uma descrição",
                "startDate": "2023-06-09 20:34:50",
                "endDate": null,
                "archived": false,
                "idx": 1
              }]
          }]
      archivedCards:
        type: array
        items:
          type: object
          example: [{
            "idCard": 39,
            "idList": null,
            "idBoard": 1,
            "name": "Card6",
            "description": "",
            "startDate": "2023-06-09 20:19:36",
            "endDate": null,
            "archived": true,
            "idx": 3
          }]

  boardReturn:
    type: object
    required:
      - idBoard
    properties:
      idBoard:
        type: integer
        example: 1

  listReturn:
    type: object
    required:
      - list identifier
    properties:
      list identifier:
        type: integer
        example: 1

  list:
    type: object
    required:
      - idList
      - idBoard
      - name
    properties:
      idList:
        type: integer
        example: 1
      idBoard:
        type: integer
        example: 1
      name:
        type: string
        example : "to do"


  lists:
    type: array
    items:
      type: object
      example: [
        {
          "idList" : 1,
          "name" : "to do"
        },
        {
          "idList" : 2,
          "name" : "doing"
        },
        {
          "idList" : 3,
          "name" : "done"
        }]

  card:
    type: object
    required:
      - name
      - description
      - endDate
      - idList
    properties:
      name:
        type: string
        example: "card1"
      description:
        type: string
        example: "There is a card1."
      endDate:
        type: string
        example: "11-03-2022"
      idList:
        type: integer
        example: 1

  cardReturn:
    type: integer
    example: 1

  moveCard:
    type: object
    required:
      - idListNow
      - idListDst
      - cix
    properties:
      idListNow:
        type: integer
        example: 1
      idListDst:
        type: integer
        example: 2
      cix:
        type: integer
        example: 1

  idUser:
    type: object
    required:
      - idUser
    properties:
      idUser:
        type: integer
        example: 1

  listUser:
    type: array
    items:
      type: object
      example: [{
        "idUser" : 1,
        "email" : "Diogo@gmail.com",
        "name" : "Diogo",
        "token" : "DiogoToken",
        "hashedPassword" : "5e884898da28047151d0e56f8dc62927736",
        "avatar" : "profilePic1.jpg"
      },
        {
          "idUser" : 2,
          "email" : "graça@gmail.com",
          "name" : "André",
          "token" : "AndreToken",
          "hashedPassword" : "5ba9866b3db219ddad4bd8b75d1ef82",
          "avatar" : "profilePic2.jpg"
        }]

  changeAvatar:
    type: object
    required:
      - avatar
    properties:
      avatar:
        type: string
        example: "imageLink"

  login:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        example: "Daniel@gmail.com"
      password:
        type: string
        example: "Caseiro123"

  loginSuccess:
    type: string
    example: "36b8f84d-df4e-4d49-b662-bcde71a8764f"

  AllBoards:
    type: object
    required:
      - totalBoards
      - boards
    properties:
      totalBoards:
        type: integer
        example: 1
      boards:
        type: array
        items:
          type: object
          example: [{
            "idBoard": 1,
            "name": "Board1",
            "description": "This is a board1.",
            "primaryColor": "GRAY",
            "secondaryColor": "NAVY",
            "numLists": 7
          }]

  cards:
    type: array
    items:
      type: object
      example: [{
        "idCard": 1,
        "idList": 1,
        "idBoard": 1,
        "name": "Card1",
        "description": "",
        "startDate": "2023-06-10 11:16:17",
        "endDate": null,
        "archived": false,
        "idx": 1
      },
        {
          "idCard": 2,
          "idList": 1,
          "idBoard": 1,
          "name": "Card2",
          "description": null,
          "startDate": "2023-06-10 11:48:06",
          "endDate": null,
          "archived": false,
          "idx": 2
        }]

  getCard:
    type: object
    required:
      - idCard
      - idList
      - idBoard
      - name
      - description
      - startDate
      - endDate
      - archived
      - idx
    properties:
      idCard:
        type: integer
        example: 1
      idList:
        type: integer
        example: 1
      idBoard:
        type: integer
        example: 1
      name:
        type: string
        example: "card1"
      description:
        type: string
        example: "This is a card1."
      startDate:
        type: string
        example: "2023-06-11 12:54:56"
      endDate:
        type: string
        example: "2023-08-24 17:19:03"
      archived:
        type: boolean
        example: false
      idx:
        type: integer
        example: 3

  updateCard:
    type: object
    required:
      - archived
      - description
      - endDate
      - idList
    properties:
      archived:
        type: boolean
        example: false
      description:
        type: string
        example: "Isto é uma descrição."
      endDate:
        type: string
        example: "2023-10-20 22:25"
      idList:
        type: string
        example: 1

  createUser:
    type: object
    required:
      - name
      - email
      - password
      - avatar
    properties:
      name:
        type: string
        example: "Diogo"
      email:
        type: string
        example: "Diogo@email.com"
      password:
        type: string
        example: "Diogo123"
      avatar:
        type: string
        example: "profilePic.jpg"